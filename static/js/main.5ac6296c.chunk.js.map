{"version":3,"sources":["utils/storage.js","context/theme/ThemeContext.js","context/language/languages.js","context/language/LanguageContext.js","Header.js","Footer.js","components/SettingsContainer.js","components/sidebar/Navbar.js","components/Sidebar.js","components/themes/Themes.js","components/languages/Languages.js","pages/errors/NotFoundPage.js","components/pageContent/PageContentContainer.js","App.js","index.js"],"names":["setToLocal","key","value","localStorage","setItem","JSON","stringify","getFromLocal","getItem","parse","ThemeContext","createContext","allThemes","selectedThemeName","selectedTheme","setThemeWithName","ThemeProvider","props","themesSchema","themes","useState","defaultThemeName","setSelectedThemeName","Provider","name","console","log","children","languagesSchema","defaultLanguage","languages","english","polish","LanguageContext","allLanguages","selectedLanguageName","selectedLanguage","setLanguageWithName","LanguageProvider","windowNavigatorLanguage","window","navigator","language","languageName","for","includes","getWindowNavigatorLanguage","setSelectedLanguageName","Header","className","Footer","SettingsContainer","Navbar","useContext","id","path","text","map","link","to","exact","activeClassName","style","backgroundColor","colors","background","color","sidebar","Sidebar","Themes","Object","keys","themeName","widthOfThemeButton","length","tilts","useRef","current","_","i","createRef","useEffect","options","scale","speed","max","perspective","reverse","glare","maxGlare","vanillaTilts","tiltRef","push","VanillaTilt","destroy","theme","width","display","padding","border","borderRadius","Button","ref","active","onClick","useTheme","Languages","widthOfLanguageButton","setThisLanguage","NotFoundPage","pages","errors","notFound","title","message","PageContentContainer","App","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.5ac6296c.chunk.js","sourcesContent":["export const setToLocal = (key, value) => {\n  if (value) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\n\nexport const getFromLocal = (key) => {\n  const value = localStorage.getItem(key);\n\n  if (value) {\n    return JSON.parse(value);\n  }\n};\n","import { useState, createContext } from \"react\";\n// import { useState, useEffect, useLayoutEffect, createContext } from \"react\";\nimport { getFromLocal, setToLocal } from \"../../utils/storage\";\n\nimport * as themesSchema from \"./themes.json\";\n\nconst ThemeContext = createContext({\n  allThemes: {},\n  selectedThemeName: \"\",\n  selectedTheme: {},\n  setThemeWithName: () => {},\n});\n\nexport default ThemeContext;\n\nexport function ThemeProvider(props) {\n  const allThemes = getFromLocal(\"all-themes\") || themesSchema.default.themes;\n  setToLocal(\"all-themes\", allThemes);\n\n  const [selectedThemeName, setSelectedThemeName] = useState(\n    getFromLocal(\"selected-theme-name\") || themesSchema.default.defaultThemeName\n  );\n  setToLocal(\"selected-theme-name\", selectedThemeName);\n\n  // useLayoutEffect(() => {\n  //   const selectedThemeName = getFromLocal(\"selected-theme-name\");\n\n  //   if (selectedThemeName) {\n  //     setThemeN(selectedTheme);\n  //   }\n  // }, [themeName]);\n\n  // useEffect(() => {\n  //   console.log(\"changed theme name\");\n  //   setToLocal(\"selected-theme-name\", themeName);\n  // }, [themeName]);\n\n  const setThemeWithName = (name) => {\n    console.log(\"Set theme: \" + name);\n    setToLocal(\"selected-theme-name\", name);\n    setSelectedThemeName(name);\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        allThemes,\n        selectedTheme: allThemes[selectedThemeName],\n        setThemeWithName,\n      }}\n    >\n      {props.children}\n    </ThemeContext.Provider>\n  );\n}\n","import * as english from \"./languages/english.json\";\nimport * as polish from \"./languages/polish.json\";\n\nconst languagesSchema = {\n  defaultLanguage: \"english\",\n  languages: {\n    english: english.default,\n    polish: polish.default,\n  },\n};\n\nexport default languagesSchema;\n","import { useState, createContext } from \"react\";\n// import { useState, useEffect, useLayoutEffect, createContext } from \"react\";\nimport { getFromLocal, setToLocal } from \"../../utils/storage\";\n\nimport languagesSchema from \"./languages\";\n\nconst LanguageContext = createContext({\n  allLanguages: {},\n  selectedLanguageName: \"\",\n  selectedLanguage: {},\n  setLanguageWithName: () => {},\n});\n\nexport default LanguageContext;\n\nexport function LanguageProvider(props) {\n  const allLanguages =\n    getFromLocal(\"all-languages\") || languagesSchema.languages;\n  setToLocal(\"all-languages\", allLanguages);\n\n  const [selectedLanguageName, setSelectedLanguageName] = useState(\n    getFromLocal(\"selected-language-name\") ||\n      getWindowNavigatorLanguage(allLanguages) ||\n      languagesSchema.defaultLanguage\n  );\n  setToLocal(\"selected-language-name\", selectedLanguageName);\n\n  function getWindowNavigatorLanguage(languages) {\n    const windowNavigatorLanguage = window.navigator.language;\n    for (const languageName in languages) {\n      if (languages[languageName].for.includes(windowNavigatorLanguage)) {\n        return languageName;\n      }\n    }\n  }\n\n  // useLayoutEffect(() => {\n  //   const selectedLanguageName = getFromLocal(\"selected-language-name\");\n\n  //   if (selectedLanguageName) {\n  //     setLanguageN(selectedLanguage);\n  //   }\n  // }, [languageName]);\n\n  // useEffect(() => {\n  //   console.log(\"changed language name\");\n  //   setToLocal(\"selected-language-name\", languageName);\n  // }, [languageName]);\n\n  const setLanguageWithName = (name) => {\n    console.log(\"Set language: \" + name);\n    setToLocal(\"selected-language-name\", name);\n    setSelectedLanguageName(name);\n  };\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        allLanguages,\n        selectedLanguage: allLanguages[selectedLanguageName],\n        setLanguageWithName,\n      }}\n    >\n      {props.children}\n    </LanguageContext.Provider>\n  );\n}\n","const Header = () => {\n  return (\n    // <div className=\"header col-12\">\n    <div className=\"header\">Header</div>\n  );\n};\n\nexport default Header;\n","const Footer = () => {\n  return (\n    // <div className=\"footer col-12\">\n    <div className=\"footer\">Footer</div>\n  );\n};\n\nexport default Footer;\n","const SettingsContainer = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default SettingsContainer;","import { NavLink } from \"react-router-dom\";\nimport { useContext } from \"react\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nimport \"./Navbar.scss\";\n\nconst Navbar = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  const links = [\n    {\n      id: 1,\n      path: \"/\",\n      text: \"index\",\n    },\n    {\n      id: 2,\n      path: \"/settings\",\n      text: \"settings\",\n    },\n    {\n      id: 3,\n      path: \"/themes\",\n      text: \"themes\",\n    },\n    {\n      id: 4,\n      path: \"/languages\",\n      text: \"languages\",\n    },\n    {\n      id: 404,\n      path: \"/404\",\n      text: \"notFound\",\n    },\n  ];\n\n  return (\n    <div className=\"sidebar-links-container\">\n      <ul className=\"sidebar-links\">\n        {links.map((link) => {\n          return (\n            <li key={link.id}>\n              <NavLink\n                to={link.path}\n                exact={link.path === \"/\"}\n                className={\"sidebar-link \" + link.text}\n                activeClassName=\"active-link\"\n                style={{\n                  backgroundColor: selectedTheme.colors.background,\n                  color: selectedTheme.colors.text,\n                }}\n              >\n                {selectedLanguage.sidebar[link.text]}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import Navbar from \"./sidebar/Navbar\";\n\nimport \"./Sidebar.scss\";\n\nconst Sidebar = () => {\n  return (\n    <div>\n      <div className=\"sidebar-title\">Sidebar</div>\n      <Navbar />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import { useEffect, useContext, useRef, createRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nimport VanillaTilt from \"vanilla-tilt\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nconst Themes = () => {\n  const { allThemes, selectedTheme, setThemeWithName } = useContext(\n    ThemeContext\n  );\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  const themes = Object.keys(allThemes).map(\n    (themeName) => allThemes[themeName]\n  );\n\n  const widthOfThemeButton = (1 / themes.length) * 100 + \"%\";\n\n  const tilts = useRef([]);\n  tilts.current = themes.map((_, i) => tilts.current[i] ?? createRef(null));\n\n  useEffect(() => {\n    const options = {\n      scale: 1.1,\n      speed: 5000,\n      max: 20,\n      perspective: 600,\n      reverse: true,\n      glare: true,\n      maxGlare: 0.5,\n    };\n\n    const vanillaTilts = [];\n    for (const tiltRef of tilts.current) {\n      vanillaTilts.push(new VanillaTilt(tiltRef.current, options));\n    }\n\n    return () => {\n      for (const vanillaTilt of vanillaTilts) {\n        vanillaTilt.destroy();\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div>Themes</div>\n\n      {themes.map((theme, i) => (\n        <div\n          key={theme.id}\n          style={{\n            width: widthOfThemeButton,\n            display: \"inline-block\",\n            padding: \"15px\",\n          }}\n        >\n          {theme.name === selectedTheme.name && (\n            <div\n              style={{\n                border: \"5px solid green\",\n                borderRadius: \"15px\",\n              }}\n            >\n              Active\n            </div>\n          )}\n\n          <Button\n            ref={tilts.current[i]}\n            style={{\n              backgroundColor: theme.colors.background,\n              color: theme.colors.text,\n              width: \"100%\",\n            }}\n            active={theme.name === selectedTheme.name}\n            onClick={() => setThemeWithName(theme.name)}\n          >\n            {selectedLanguage.themes.useTheme[theme.name]}\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Themes;\n","import { useEffect, useContext, useRef, createRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nimport VanillaTilt from \"vanilla-tilt\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nconst Languages = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n  const { allLanguages, selectedLanguage, setLanguageWithName } = useContext(\n    LanguageContext\n  );\n\n  const languages = Object.keys(allLanguages).map(\n    (languageName) => allLanguages[languageName]\n  );\n\n  const widthOfLanguageButton = (1 / languages.length) * 100 + \"%\";\n\n  const tilts = useRef([]);\n  tilts.current = languages.map((_, i) => tilts.current[i] ?? createRef(null));\n\n  useEffect(() => {\n    const options = {\n      scale: 1.1,\n      speed: 5000,\n      max: 20,\n      perspective: 600,\n      reverse: true,\n      glare: true,\n      maxGlare: 0.5,\n    };\n\n    const vanillaTilts = [];\n    for (const tiltRef of tilts.current) {\n      vanillaTilts.push(new VanillaTilt(tiltRef.current, options));\n    }\n\n    return () => {\n      for (const vanillaTilt of vanillaTilts) {\n        vanillaTilt.destroy();\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div>{selectedLanguage.sidebar.languages}</div>\n\n      {languages.map((language, i) => (\n        <div\n          key={language.id}\n          style={{\n            width: widthOfLanguageButton,\n            display: \"inline-block\",\n            padding: \"15px\",\n          }}\n        >\n          {language.name === selectedLanguage.name && (\n            <div\n              style={{\n                border: \"5px solid green\",\n                borderRadius: \"15px\",\n              }}\n            >\n              Active\n            </div>\n          )}\n\n          <Button\n            ref={tilts.current[i]}\n            style={{\n              backgroundColor: selectedTheme.colors.background,\n              color: selectedTheme.colors.text,\n              width: \"100%\",\n            }}\n            active={language.name === selectedLanguage.name}\n            onClick={() => setLanguageWithName(language.name)}\n          >\n            {language.setThisLanguage}\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Languages;\n","import { useContext } from \"react\";\n\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nconst NotFoundPage = () => {\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  return (\n    <div>\n      <h2>{selectedLanguage.pages.errors.notFound.title}</h2>\n      <h4>{selectedLanguage.pages.errors.notFound.message}</h4>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import { useContext } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\n\nimport SettingsContainer from \"../SettingsContainer\";\nimport Sidebar from \"../Sidebar\";\n\nimport Themes from \"../../components/themes/Themes\";\nimport Languages from \"../../components/languages/Languages\";\n\nimport NotFoundPage from \"../../pages/errors/NotFoundPage\";\n\nimport \"./PageContentContainer.scss\";\n\nconst PageContentContainer = (props) => {\n  const { selectedTheme } = useContext(ThemeContext);\n\n  return (\n    <div className=\"page-content-container container\">\n      <div className=\"col-3  page-sidebar\">\n        <Sidebar />\n      </div>\n\n      <div\n        className=\"col-9 page-content\"\n        style={{\n          backgroundColor: selectedTheme.colors.background,\n          color: selectedTheme.colors.text,\n        }}\n      >\n        <Switch>\n          <Route exact path=\"/\">\n            <div>Index</div>\n          </Route>\n          <Route exact path=\"/settings\">\n            <SettingsContainer />\n          </Route>\n          <Route exact path=\"/themes\">\n            <Themes />\n          </Route>\n          <Route exact path=\"/languages\">\n            <Languages />\n          </Route>\n          <Route path=\"*\">\n            <NotFoundPage />\n            <Redirect to=\"/404\" />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default PageContentContainer;\n","import { ThemeProvider } from \"./context/theme/ThemeContext\";\nimport { LanguageProvider } from \"./context/language/LanguageContext\";\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport PageContentContainer from \"./components/pageContent/PageContentContainer\";\n\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <div className=\"app-container\">\n          <div className=\"site-content\">\n            <Header />\n            <PageContentContainer />\n            <Footer />\n          </div>\n        </div>\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <StrictMode>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </HashRouter>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}