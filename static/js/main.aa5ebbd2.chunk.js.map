{"version":3,"sources":["utils/storage.js","context/theme/ThemeContext.js","context/language/languages.js","context/language/LanguageContext.js","Header.js","Footer.js","components/sidebar/Navbar.js","components/sidebar/Sidebar.js","components/SettingsContainer.js","components/themes/Themes.js","components/languages/Languages.js","pages/errors/NotFoundPage.js","components/pageContent/PageContent.js","components/pageContent/PageContentContainer.js","App.js","AppContainer.js","index.js"],"names":["setToLocal","key","value","localStorage","setItem","JSON","stringify","getFromLocal","getItem","parse","ThemeContext","createContext","allThemes","selectedThemeName","selectedTheme","setThemeWithName","ThemeProvider","props","themesSchema","themes","useState","defaultThemeName","setSelectedThemeName","Provider","name","console","log","children","languagesSchema","defaultLanguage","languages","english","polish","LanguageContext","allLanguages","selectedLanguageName","selectedLanguage","setLanguageWithName","LanguageProvider","windowNavigatorLanguage","window","navigator","language","languageName","for","includes","getWindowNavigatorLanguage","setSelectedLanguageName","Header","className","Footer","Navbar","useContext","navbarTheme","theme","sidebar","navbar","id","path","text","map","link","to","exact","activeClassName","style","textTransform","backgroundColor","color","textColor","Sidebar","sidebarTheme","SettingsContainer","Themes","Object","keys","themeName","widthOfThemeButton","length","tilts","useRef","current","_","i","createRef","useEffect","options","scale","speed","max","perspective","reverse","glare","maxGlare","vanillaTilts","tiltRef","push","VanillaTilt","destroy","themeNestedKeys","flatten","themesTheme","pageContent","width","display","padding","border","borderRadius","borderColor","activeTheme","Button","ref","active","onClick","useTheme","alignItems","justifyContent","elem","lodash","get","Languages","widthOfLanguageButton","languageNestedKeys","languagesTheme","activeLanguage","setThisLanguage","NotFoundPage","pages","errors","notFound","title","message","PageContent","pageContentTheme","PageContentContainer","App","AppContainer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa5ebbd2.chunk.js","sourcesContent":["export const setToLocal = (key, value) => {\n  if (value) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\n\nexport const getFromLocal = (key) => {\n  const value = localStorage.getItem(key);\n\n  if (value) {\n    return JSON.parse(value);\n  }\n};\n","import { useState, createContext } from \"react\";\n// import { useState, useEffect, useLayoutEffect, createContext } from \"react\";\n\n// import { getFromLocal, setToLocal } from \"../../utils/storage\";\nimport { setToLocal } from \"../../utils/storage\";\n\nimport * as themesSchema from \"./themes.json\";\n\nconst ThemeContext = createContext({\n  allThemes: {},\n  selectedThemeName: \"\",\n  selectedTheme: {},\n  setThemeWithName: () => {},\n});\n\nexport default ThemeContext;\n\nexport function ThemeProvider(props) {\n  // const allThemes = getFromLocal(\"all-themes\") || themesSchema.default.themes;\n  // setToLocal(\"all-themes\", allThemes);\n  // const [selectedThemeName, setSelectedThemeName] = useState(\n  // getFromLocal(\"selected-theme-name\") || themesSchema.default.defaultThemeName\n  // );\n  // setToLocal(\"selected-theme-name\", selectedThemeName);\n  const allThemes = themesSchema.default.themes;\n  setToLocal(\"all-themes\", allThemes);\n\n  const [selectedThemeName, setSelectedThemeName] = useState(\n    themesSchema.default.defaultThemeName\n  );\n  setToLocal(\"selected-theme-name\", selectedThemeName);\n\n  // useLayoutEffect(() => {\n  //   const selectedThemeName = getFromLocal(\"selected-theme-name\");\n\n  //   if (selectedThemeName) {\n  //     setThemeN(selectedTheme);\n  //   }\n  // }, [themeName]);\n\n  // useEffect(() => {\n  //   console.log(\"changed theme name\");\n  //   setToLocal(\"selected-theme-name\", themeName);\n  // }, [themeName]);\n\n  const setThemeWithName = (name) => {\n    console.log(\"Set theme: \" + name);\n    setToLocal(\"selected-theme-name\", name);\n    setSelectedThemeName(name);\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        allThemes,\n        selectedTheme: allThemes[selectedThemeName],\n        setThemeWithName,\n      }}\n    >\n      {props.children}\n    </ThemeContext.Provider>\n  );\n}\n","import * as english from \"./languages/english.json\";\nimport * as polish from \"./languages/polish.json\";\n\nconst languagesSchema = {\n  defaultLanguage: \"english\",\n  languages: {\n    english: english.default,\n    polish: polish.default,\n  },\n};\n\nexport default languagesSchema;\n","import { useState, createContext } from \"react\";\n// import { useState, useEffect, useLayoutEffect, createContext } from \"react\";\nimport { getFromLocal, setToLocal } from \"../../utils/storage\";\n\nimport languagesSchema from \"./languages\";\n\nconst LanguageContext = createContext({\n  allLanguages: {},\n  selectedLanguageName: \"\",\n  selectedLanguage: {},\n  setLanguageWithName: () => {},\n});\n\nexport default LanguageContext;\n\nexport function LanguageProvider(props) {\n  const allLanguages =\n    getFromLocal(\"all-languages\") || languagesSchema.languages;\n  setToLocal(\"all-languages\", allLanguages);\n\n  const [selectedLanguageName, setSelectedLanguageName] = useState(\n    getFromLocal(\"selected-language-name\") ||\n      getWindowNavigatorLanguage(allLanguages) ||\n      languagesSchema.defaultLanguage\n  );\n  setToLocal(\"selected-language-name\", selectedLanguageName);\n\n  function getWindowNavigatorLanguage(languages) {\n    const windowNavigatorLanguage = window.navigator.language;\n    for (const languageName in languages) {\n      if (languages[languageName].for.includes(windowNavigatorLanguage)) {\n        return languageName;\n      }\n    }\n  }\n\n  // useLayoutEffect(() => {\n  //   const selectedLanguageName = getFromLocal(\"selected-language-name\");\n\n  //   if (selectedLanguageName) {\n  //     setLanguageN(selectedLanguage);\n  //   }\n  // }, [languageName]);\n\n  // useEffect(() => {\n  //   console.log(\"changed language name\");\n  //   setToLocal(\"selected-language-name\", languageName);\n  // }, [languageName]);\n\n  const setLanguageWithName = (name) => {\n    console.log(\"Set language: \" + name);\n    setToLocal(\"selected-language-name\", name);\n    setSelectedLanguageName(name);\n  };\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        allLanguages,\n        selectedLanguage: allLanguages[selectedLanguageName],\n        setLanguageWithName,\n      }}\n    >\n      {props.children}\n    </LanguageContext.Provider>\n  );\n}\n","const Header = () => {\n  return (\n    // <div className=\"header col-12\">\n    <div className=\"header\">Header</div>\n  );\n};\n\nexport default Header;\n","const Footer = () => {\n  return (\n    // <div className=\"footer col-12\">\n    <div className=\"footer\">Footer</div>\n  );\n};\n\nexport default Footer;\n","import { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nimport \"./Navbar.scss\";\n\nconst Navbar = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  const links = [\n    {\n      id: 1,\n      path: \"/\",\n      text: \"index\",\n    },\n    {\n      id: 2,\n      path: \"/settings\",\n      text: \"settings\",\n    },\n    {\n      id: 3,\n      path: \"/themes\",\n      text: \"themes\",\n    },\n    {\n      id: 4,\n      path: \"/languages\",\n      text: \"languages\",\n    },\n    {\n      id: 404,\n      path: \"/404\",\n      text: \"notFound\",\n    },\n  ];\n\n  const navbarTheme = selectedTheme.theme.sidebar.navbar;\n\n  return (\n    <div className=\"sidebar-links-container\">\n      <ul className=\"sidebar-links\">\n        {links.map((link) => {\n          return (\n            <li key={link.id}>\n              <NavLink\n                to={link.path}\n                exact={link.path === \"/\"}\n                className={\"sidebar-link \" + link.text}\n                activeClassName=\"active-link\"\n                style={{\n                  textTransform: navbarTheme.textTransform,\n                  backgroundColor: navbarTheme.backgroundColor,\n                  color: navbarTheme.textColor,\n                }}\n              >\n                {selectedLanguage.sidebar[link.text]}\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { useContext } from \"react\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\n\nimport Navbar from \"./Navbar\";\n\nimport \"./Sidebar.scss\";\n\nconst Sidebar = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n\n  const sidebarTheme = selectedTheme.theme.sidebar;\n\n  return (\n    <div\n      className=\"sidebar\"\n      style={{\n        backgroundColor: sidebarTheme.backgroundColor,\n        color: sidebarTheme.textColor,\n      }}\n    >\n      <div className=\"sidebar-title\">Sidebar</div>\n      <Navbar />\n    </div>\n  );\n};\n\nexport default Sidebar;\n","const SettingsContainer = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default SettingsContainer;","import { useEffect, useContext, useRef, createRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nimport lodash from \"lodash\";\nimport VanillaTilt from \"vanilla-tilt\";\nimport { flatten } from \"flat\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nconst Themes = () => {\n  const { allThemes, selectedTheme, setThemeWithName } = useContext(\n    ThemeContext\n  );\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  const themes = Object.keys(allThemes).map(\n    (themeName) => allThemes[themeName]\n  );\n\n  const widthOfThemeButton = (1 / themes.length) * 100 + \"%\";\n\n  const tilts = useRef([]);\n  tilts.current = themes.map((_, i) => tilts.current[i] ?? createRef(null));\n\n  useEffect(() => {\n    const options = {\n      scale: 1.1,\n      speed: 5000,\n      max: 20,\n      perspective: 600,\n      reverse: true,\n      glare: true,\n      maxGlare: 0.5,\n    };\n\n    const vanillaTilts = [];\n    for (const tiltRef of tilts.current) {\n      vanillaTilts.push(new VanillaTilt(tiltRef.current, options));\n    }\n\n    return () => {\n      for (const vanillaTilt of vanillaTilts) {\n        vanillaTilt.destroy();\n      }\n    };\n  }, []);\n\n  const themeNestedKeys = Object.keys(flatten(selectedTheme.theme));\n\n  const themesTheme = selectedTheme.theme.pageContent.themes;\n\n  return (\n    <div>\n      <div>Themes</div>\n      {themes.map((theme, i) => (\n        <div\n          key={theme.id}\n          style={{\n            width: widthOfThemeButton,\n            display: \"inline-block\",\n            padding: \"15px\",\n          }}\n        >\n          {theme.name === selectedTheme.name && (\n            <div\n              style={{\n                border: \"5px solid green\",\n                borderRadius: \"15px\",\n                borderColor: themesTheme.activeTheme.borderColor,\n                color: themesTheme.activeTheme.textColor,\n              }}\n            >\n              Active\n            </div>\n          )}\n\n          <Button\n            ref={tilts.current[i]}\n            style={{\n              backgroundColor: theme.theme.backgroundColor,\n              color: theme.theme.textColor,\n              width: \"100%\",\n            }}\n            active={theme.name === selectedTheme.name}\n            onClick={() => setThemeWithName(theme.name)}\n          >\n            {selectedLanguage.themes.useTheme[theme.name]}\n          </Button>\n        </div>\n      ))}\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <table>\n          <thead>\n            <tr>\n              <th>Elem ID</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {themeNestedKeys.map((elem) => (\n              <tr key={elem}>\n                <td>{elem}</td>\n                <td>{lodash.get(selectedTheme.theme, elem)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Themes;\n","import { useEffect, useContext, useRef, createRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nimport lodash from \"lodash\";\nimport VanillaTilt from \"vanilla-tilt\";\nimport { flatten } from \"flat\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nconst Languages = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n  const { allLanguages, selectedLanguage, setLanguageWithName } = useContext(\n    LanguageContext\n  );\n\n  const languages = Object.keys(allLanguages).map(\n    (languageName) => allLanguages[languageName]\n  );\n\n  const widthOfLanguageButton = (1 / languages.length) * 100 + \"%\";\n\n  const tilts = useRef([]);\n  tilts.current = languages.map((_, i) => tilts.current[i] ?? createRef(null));\n\n  useEffect(() => {\n    const options = {\n      scale: 1.1,\n      speed: 5000,\n      max: 20,\n      perspective: 600,\n      reverse: true,\n      glare: true,\n      maxGlare: 0.5,\n    };\n\n    const vanillaTilts = [];\n    for (const tiltRef of tilts.current) {\n      vanillaTilts.push(new VanillaTilt(tiltRef.current, options));\n    }\n\n    return () => {\n      for (const vanillaTilt of vanillaTilts) {\n        vanillaTilt.destroy();\n      }\n    };\n  }, []);\n\n  const languageNestedKeys = Object.keys(flatten(selectedLanguage));\n\n  const languagesTheme = selectedTheme.theme.pageContent.languages;\n\n  return (\n    <div>\n      <div>{selectedLanguage.sidebar.languages}</div>\n\n      {languages.map((language, i) => (\n        <div\n          key={language.id}\n          style={{\n            width: widthOfLanguageButton,\n            display: \"inline-block\",\n            padding: \"15px\",\n          }}\n        >\n          {language.name === selectedLanguage.name && (\n            <div\n              style={{\n                backgroundColor: languagesTheme.activeLanguage.backgroundColor,\n                border: \"5px solid\",\n                borderRadius: \"15px\",\n                borderColor: languagesTheme.activeLanguage.borderColor,\n                color: languagesTheme.activeLanguage.textColor,\n              }}\n            >\n              Active\n            </div>\n          )}\n\n          <Button\n            ref={tilts.current[i]}\n            style={{\n              backgroundColor: languagesTheme.backgroundColor,\n              color: languagesTheme.textColor,\n              width: \"100%\",\n            }}\n            active={language.name === selectedLanguage.name}\n            onClick={() => setLanguageWithName(language.name)}\n          >\n            {language.setThisLanguage}\n          </Button>\n        </div>\n      ))}\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <table>\n          <thead>\n            <tr>\n              <th>Elem ID</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {languageNestedKeys.map((elem) => (\n              <tr key={elem}>\n                <td>{elem}</td>\n                <td>{lodash.get(selectedLanguage, elem)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Languages;\n","import { useContext } from \"react\";\n\nimport LanguageContext from \"../../context/language/LanguageContext\";\n\nconst NotFoundPage = () => {\n  const { selectedLanguage } = useContext(LanguageContext);\n\n  return (\n    <div>\n      <h2>{selectedLanguage.pages.errors.notFound.title}</h2>\n      <h4>{selectedLanguage.pages.errors.notFound.message}</h4>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import { useContext } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\n\nimport SettingsContainer from \"../SettingsContainer\";\n\nimport Themes from \"../../components/themes/Themes\";\nimport Languages from \"../../components/languages/Languages\";\n\nimport NotFoundPage from \"../../pages/errors/NotFoundPage\";\n\nimport \"./PageContentContainer.scss\";\n\nconst PageContent = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n\n  const pageContentTheme = selectedTheme.theme.pageContent;\n\n  return (\n    <div\n      className=\"page-content\"\n      style={{\n        backgroundColor: pageContentTheme.backgroundColor,\n        color: pageContentTheme.text,\n      }}\n    >\n      <Switch>\n        <Route exact path=\"/\">\n          <div>Index</div>\n        </Route>\n        <Route exact path=\"/settings\">\n          <SettingsContainer />\n        </Route>\n        <Route exact path=\"/themes\">\n          <Themes />\n        </Route>\n        <Route exact path=\"/languages\">\n          <Languages />\n        </Route>\n        <Route path=\"*\">\n          <NotFoundPage />\n          <Redirect to=\"/404\" />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default PageContent;\n","import { useContext } from \"react\";\n\nimport ThemeContext from \"../../context/theme/ThemeContext\";\n\nimport Sidebar from \"../sidebar/Sidebar\";\nimport PageContent from \"./PageContent\";\n\nimport \"./PageContentContainer.scss\";\n\nconst PageContentContainer = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n\n  return (\n    <div className=\"page-content-container container\">\n      <div className=\"col-3 page-sidebar\">\n        <Sidebar />\n      </div>\n\n      <div className=\"col-9 page-content\">\n        <PageContent />\n      </div>\n    </div>\n  );\n};\n\nexport default PageContentContainer;\n","import { useContext } from \"react\";\n\nimport ThemeContext from \"./context/theme/ThemeContext\";\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport PageContentContainer from \"./components/pageContent/PageContentContainer\";\n\nimport \"./App.scss\";\n\nconst App = () => {\n  const { selectedTheme } = useContext(ThemeContext);\n\n  return (\n    <div\n      className=\"app-container\"\n      style={{\n        backgroundColor: selectedTheme.theme.backgroundColor,\n        color: selectedTheme.theme.text,\n      }}\n    >\n      <div className=\"site-content\">\n        <Header />\n        <PageContentContainer />\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ThemeProvider } from \"./context/theme/ThemeContext\";\nimport { LanguageProvider } from \"./context/language/LanguageContext\";\n\nimport App from \"./App\";\n\nconst AppContainer = () => {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <App />\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default AppContainer;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.scss\";\nimport AppContainer from \"./AppContainer\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <StrictMode>\n    <HashRouter>\n      <AppContainer />\n    </HashRouter>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}